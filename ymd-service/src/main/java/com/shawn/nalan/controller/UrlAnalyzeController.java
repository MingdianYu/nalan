package com.shawn.nalan.controller;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import lombok.extern.slf4j.Slf4j;import org.apache.commons.collections4.MapUtils;import org.apache.commons.lang3.StringUtils;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.ss.usermodel.*;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.io.*;import java.net.HttpURLConnection;import java.net.URL;import java.util.List;import java.util.Map;@RestController@RequestMapping("/urlAnalyze")@Slf4jpublic class UrlAnalyzeController {    @RequestMapping("/work")    public String analyseUrl(String src) throws Exception{        long startTime = System.currentTimeMillis();//        String srcFilePath = "/Users/yumingdian/Downloads/22.xlsx";        String path = loadFile(src);        long time = (System.currentTimeMillis() - startTime)/1000;        System.out.println("已完成此次解析，共耗时" + time+"秒，请前往该路径下查看对应文件：" + path);        return "nihao";    }    private String loadFile(String srcFilePath) throws Exception{        File file = new File(srcFilePath);        String desFilePath = srcFilePath.substring(0,3);        FileInputStream in = null;        Workbook workbook = null;        try {            in = new FileInputStream(file);            if (file.getName().endsWith(".xls")) {                workbook = new HSSFWorkbook(in);            } else if (file.getName().endsWith(".xlsx")) {                workbook = new XSSFWorkbook(in);            } else {                throw new Exception("不支持的文件后缀，仅支持上传.xls或.xlsx结尾的Excel文件。");            }        } finally {            if (in != null) {                in.close();            }        }        List<String> urls = analize(workbook);        Map<Integer, String> analysisResult = judgeRealUrl(urls);        String path = getReturnFile(file, analysisResult, desFilePath);        return  path;    }    private Map<Integer, String> judgeRealUrl(List<String> urlStrs) throws Exception{        Map<Integer, String> resultList = Maps.newHashMap();        int index = 0;        for (String urlr : urlStrs) {            String url = "https://item.jd.com/" + urlr + ".html";            URL realURL = new URL(url.trim());            HttpURLConnection conn = (HttpURLConnection)realURL.openConnection();            conn.setRequestProperty("accept", "*/*");            conn.setRequestProperty("connection", "Keep-Alive");            conn.setRequestProperty("user-agent", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36");            conn.connect();            // 只有inputstream之后，才会进行跳转到最终的url            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream(), "utf-8"));            String conStr = conn.toString();            String realUrl = conStr.substring(conStr.indexOf(":") + 1).trim();            if (url.equals(realUrl)) {                resultList.put(index, "一致");            } else {                resultList.put(index, "不一致");            }            index++;            System.out.println("第" + index + "个地址已完成解析");            in.close();            conn.disconnect();        }        return resultList;    }    private List<String> analize(Workbook workbook) {        List<String> result = Lists.newArrayList();        Sheet sheet = workbook.getSheetAt(0);        int maxOperateSum = 100000;        if (sheet == null) {            return result;        } else {            for (int i = 0; sheet.getRow(i) != null && i <= maxOperateSum; i++) {                Row row = sheet.getRow(i);                // if the row is empty, skip this row                if (isEmptyRow(row)) {                    continue;                }                result.add(row.getCell(0).toString().trim());            }        }        return result;    }    private boolean isEmptyRow(Row row) {        if (row == null) {            return true;        }        if (row.getLastCellNum() <= 0) {            return true;        }        for (int cellNum = row.getFirstCellNum(); cellNum < row.getLastCellNum(); cellNum++) {            Cell cell = row.getCell(cellNum);            if (cell != null && cell.getCellType() != Cell.CELL_TYPE_BLANK                    && isNotBlank(cell.toString())) {                return false;            }        }        return true;    }    private boolean isNotBlank(String str) {        return !isBlank(str);    }    private boolean isBlank(String str) {        int strLen;        if (str == null || (strLen = str.length()) == 0) {            return true;        }        for (int i = 0; i < strLen; i++) {            if ((Character.isWhitespace(str.charAt(i)) == false)) {                return false;            }        }        return true;    }    private static String getReturnFile(File file, Map<Integer, String> msgList, String desFilePath) throws FileNotFoundException, IOException {        String fullPathName = desFilePath + "地址解析结果文件.xlsx";        new File(fullPathName);        // 直接返回原文        if (MapUtils.isEmpty(msgList)) {            return fullPathName;        }        Workbook wb = null;        FileInputStream in = null;        try {            in = new FileInputStream(file);            wb = new XSSFWorkbook(in);        } finally {            if (in != null) {                in.close();            }        }        Sheet sheet = wb.getSheetAt(0);        Row headerRow = sheet.getRow(0);        headerRow = null != headerRow ? headerRow : sheet.createRow(0);        // 最后一列写入        int targetCellIndex = headerRow.getPhysicalNumberOfCells();        sheet.setColumnWidth(targetCellIndex, 80 * 256);        for (int i = 0; i< msgList.keySet().size(); i++) {            Row row = sheet.getRow(i);            if (row == null) {                row = sheet.createRow(i);            }            String msg = msgList.get(i);            if (StringUtils.isBlank(msg)) {                continue;            }            Cell cell = row.createCell(targetCellIndex);            cell.setCellStyle(createAppendColumnCellStyle(wb));            cell.setCellValue(msg);        }        workookWrite(wb, fullPathName);// 写入        return fullPathName;    }    private static CellStyle createAppendColumnCellStyle(Workbook wb) {        Font f = wb.createFont();        f.setFontHeightInPoints((short) 10);        f.setColor(IndexedColors.BLACK.getIndex());        f.setBoldweight(Font.BOLDWEIGHT_NORMAL);        CellStyle cs = wb.createCellStyle();        cs.setFont(f);        cs.setFillPattern(CellStyle.SOLID_FOREGROUND);        cs.setFillForegroundColor(IndexedColors.LIGHT_YELLOW.getIndex());        cs.setAlignment(CellStyle.ALIGN_LEFT);        return cs;    }    /**     * workbook写入     */    private static void workookWrite(Workbook workbook, String path) throws IOException {        File file = new File(path);        // 写流        FileOutputStream out = null;        try {            out = new FileOutputStream(file);            workbook.write(out);            out.flush();        } finally {            if (out != null) {                try {                    out.close();                } catch (IOException e) {                    throw e;                }            }        }    }}